// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RedditUWP.API.Models;
//
//    var redditPostsApi = RedditPostsApi.FromJson(jsonString);

namespace RedditUWP.API.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RedditPostsApi
    {
        [JsonProperty("kind", NullValueHandling = NullValueHandling.Ignore)]
        public string Kind { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public RedditPostsApiData Data { get; set; }
    }

    public partial class RedditPostsApiData
    {
        [JsonProperty("modhash", NullValueHandling = NullValueHandling.Ignore)]
        public string Modhash { get; set; }

        [JsonProperty("dist", NullValueHandling = NullValueHandling.Ignore)]
        public long? Dist { get; set; }

        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public List<Child> Children { get; set; }

        [JsonProperty("after", NullValueHandling = NullValueHandling.Ignore)]
        public string After { get; set; }

        [JsonProperty("before")]
        public object Before { get; set; }
    }

    public partial class Child
    {
        [JsonProperty("kind", NullValueHandling = NullValueHandling.Ignore)]
        public string Kind { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public ChildData Data { get; set; }
    }

    public partial class ChildData
    {
        [JsonProperty("approved_at_utc")]
        public object ApprovedAtUtc { get; set; }

        [JsonProperty("subreddit", NullValueHandling = NullValueHandling.Ignore)]
        public string Subreddit { get; set; }

        [JsonProperty("selftext", NullValueHandling = NullValueHandling.Ignore)]
        public string Selftext { get; set; }

        [JsonProperty("author_fullname", NullValueHandling = NullValueHandling.Ignore)]
        public string AuthorFullname { get; set; }

        [JsonProperty("saved", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Saved { get; set; }

        [JsonProperty("mod_reason_title")]
        public object ModReasonTitle { get; set; }

        [JsonProperty("gilded", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gilded { get; set; }

        [JsonProperty("clicked", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Clicked { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("link_flair_richtext", NullValueHandling = NullValueHandling.Ignore)]
        public List<LinkFlairRichtext> LinkFlairRichtext { get; set; }

        [JsonProperty("subreddit_name_prefixed", NullValueHandling = NullValueHandling.Ignore)]
        public string SubredditNamePrefixed { get; set; }

        [JsonProperty("hidden", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Hidden { get; set; }

        [JsonProperty("pwls", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pwls { get; set; }

        [JsonProperty("link_flair_css_class")]
        public string LinkFlairCssClass { get; set; }

        [JsonProperty("downs", NullValueHandling = NullValueHandling.Ignore)]
        public long? Downs { get; set; }

        [JsonProperty("thumbnail_height")]
        public long? ThumbnailHeight { get; set; }

        [JsonProperty("hide_score", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideScore { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("quarantine", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Quarantine { get; set; }

        [JsonProperty("link_flair_text_color", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkFlairTextColor { get; set; }

        [JsonProperty("author_flair_background_color")]
        public string AuthorFlairBackgroundColor { get; set; }

        [JsonProperty("subreddit_type", NullValueHandling = NullValueHandling.Ignore)]
        public string SubredditType { get; set; }

        [JsonProperty("ups", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ups { get; set; }

        [JsonProperty("total_awards_received", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalAwardsReceived { get; set; }

        [JsonProperty("media_embed", NullValueHandling = NullValueHandling.Ignore)]
        public DataMediaEmbed MediaEmbed { get; set; }

        [JsonProperty("thumbnail_width")]
        public long? ThumbnailWidth { get; set; }

        [JsonProperty("author_flair_template_id")]
        public Guid? AuthorFlairTemplateId { get; set; }

        [JsonProperty("is_original_content", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOriginalContent { get; set; }

        [JsonProperty("user_reports", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> UserReports { get; set; }

        [JsonProperty("secure_media")]
        public Media SecureMedia { get; set; }

        [JsonProperty("is_reddit_media_domain", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRedditMediaDomain { get; set; }

        [JsonProperty("is_meta", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMeta { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("secure_media_embed", NullValueHandling = NullValueHandling.Ignore)]
        public DataMediaEmbed SecureMediaEmbed { get; set; }

        [JsonProperty("link_flair_text")]
        public string LinkFlairText { get; set; }

        [JsonProperty("can_mod_post", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanModPost { get; set; }

        [JsonProperty("score", NullValueHandling = NullValueHandling.Ignore)]
        public long? Score { get; set; }

        [JsonProperty("approved_by")]
        public object ApprovedBy { get; set; }

        [JsonProperty("author_premium", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AuthorPremium { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        [JsonProperty("edited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Edited { get; set; }

        [JsonProperty("author_flair_css_class")]
        public string AuthorFlairCssClass { get; set; }

        [JsonProperty("steward_reports", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> StewardReports { get; set; }

        [JsonProperty("author_flair_richtext", NullValueHandling = NullValueHandling.Ignore)]
        public List<AuthorFlairRichtext> AuthorFlairRichtext { get; set; }

        [JsonProperty("gildings", NullValueHandling = NullValueHandling.Ignore)]
        public DataGildings Gildings { get; set; }

        [JsonProperty("post_hint", NullValueHandling = NullValueHandling.Ignore)]
        public string PostHint { get; set; }

        [JsonProperty("content_categories")]
        public List<string> ContentCategories { get; set; }

        [JsonProperty("is_self", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        [JsonProperty("mod_note")]
        public object ModNote { get; set; }

        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public long? Created { get; set; }

        [JsonProperty("link_flair_type", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkFlairType { get; set; }

        [JsonProperty("wls", NullValueHandling = NullValueHandling.Ignore)]
        public long? Wls { get; set; }

        [JsonProperty("removed_by_category")]
        public object RemovedByCategory { get; set; }

        [JsonProperty("banned_by")]
        public object BannedBy { get; set; }

        [JsonProperty("author_flair_type", NullValueHandling = NullValueHandling.Ignore)]
        public string AuthorFlairType { get; set; }

        [JsonProperty("domain", NullValueHandling = NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [JsonProperty("allow_live_comments", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowLiveComments { get; set; }

        [JsonProperty("selftext_html")]
        public object SelftextHtml { get; set; }

        [JsonProperty("likes")]
        public object Likes { get; set; }

        [JsonProperty("suggested_sort")]
        public string SuggestedSort { get; set; }

        [JsonProperty("banned_at_utc")]
        public object BannedAtUtc { get; set; }

        [JsonProperty("view_count")]
        public object ViewCount { get; set; }

        [JsonProperty("archived", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Archived { get; set; }

        [JsonProperty("no_follow", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NoFollow { get; set; }

        [JsonProperty("is_crosspostable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsCrosspostable { get; set; }

        [JsonProperty("pinned", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Pinned { get; set; }

        [JsonProperty("over_18", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Over18 { get; set; }

        [JsonProperty("preview", NullValueHandling = NullValueHandling.Ignore)]
        public Preview Preview { get; set; }

        [JsonProperty("all_awardings", NullValueHandling = NullValueHandling.Ignore)]
        public List<AllAwarding> AllAwardings { get; set; }

        [JsonProperty("awarders", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Awarders { get; set; }

        [JsonProperty("media_only", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MediaOnly { get; set; }

        [JsonProperty("can_gild", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanGild { get; set; }

        [JsonProperty("spoiler", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Spoiler { get; set; }

        [JsonProperty("locked", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Locked { get; set; }

        [JsonProperty("author_flair_text")]
        public string AuthorFlairText { get; set; }

        [JsonProperty("visited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

        [JsonProperty("removed_by")]
        public object RemovedBy { get; set; }

        [JsonProperty("num_reports")]
        public object NumReports { get; set; }

        [JsonProperty("distinguished")]
        public object Distinguished { get; set; }

        [JsonProperty("subreddit_id", NullValueHandling = NullValueHandling.Ignore)]
        public string SubredditId { get; set; }

        [JsonProperty("mod_reason_by")]
        public object ModReasonBy { get; set; }

        [JsonProperty("removal_reason")]
        public object RemovalReason { get; set; }

        [JsonProperty("link_flair_background_color", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkFlairBackgroundColor { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("is_robot_indexable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRobotIndexable { get; set; }

        [JsonProperty("report_reasons")]
        public object ReportReasons { get; set; }

        [JsonProperty("author", NullValueHandling = NullValueHandling.Ignore)]
        public string Author { get; set; }

        [JsonProperty("discussion_type")]
        public object DiscussionType { get; set; }

        [JsonProperty("num_comments", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumComments { get; set; }

        [JsonProperty("send_replies", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SendReplies { get; set; }

        [JsonProperty("whitelist_status", NullValueHandling = NullValueHandling.Ignore)]
        public string WhitelistStatus { get; set; }

        [JsonProperty("contest_mode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ContestMode { get; set; }

        [JsonProperty("mod_reports", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ModReports { get; set; }

        [JsonProperty("author_patreon_flair", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AuthorPatreonFlair { get; set; }

        [JsonProperty("author_flair_text_color")]
        public string AuthorFlairTextColor { get; set; }

        [JsonProperty("permalink", NullValueHandling = NullValueHandling.Ignore)]
        public string Permalink { get; set; }

        [JsonProperty("parent_whitelist_status", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentWhitelistStatus { get; set; }

        [JsonProperty("stickied", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Stickied { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("subreddit_subscribers", NullValueHandling = NullValueHandling.Ignore)]
        public long? SubredditSubscribers { get; set; }

        [JsonProperty("created_utc", NullValueHandling = NullValueHandling.Ignore)]
        public long CreatedUtc { get; set; }

        [JsonProperty("num_crossposts", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumCrossposts { get; set; }

        [JsonProperty("media")]
        public Media Media { get; set; }

        [JsonProperty("is_video", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVideo { get; set; }

        [JsonProperty("link_flair_template_id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? LinkFlairTemplateId { get; set; }

        [JsonProperty("crosspost_parent_list", NullValueHandling = NullValueHandling.Ignore)]
        public List<CrosspostParentList> CrosspostParentList { get; set; }

        [JsonProperty("crosspost_parent", NullValueHandling = NullValueHandling.Ignore)]
        public string CrosspostParent { get; set; }
    }

    public partial class AllAwarding
    {
        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public long? Count { get; set; }

        [JsonProperty("is_enabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [JsonProperty("subreddit_id")]
        public string SubredditId { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("end_date")]
        public long? EndDate { get; set; }

        [JsonProperty("award_sub_type", NullValueHandling = NullValueHandling.Ignore)]
        public string AwardSubType { get; set; }

        [JsonProperty("coin_reward", NullValueHandling = NullValueHandling.Ignore)]
        public long? CoinReward { get; set; }

        [JsonProperty("icon_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri IconUrl { get; set; }

        [JsonProperty("days_of_premium", NullValueHandling = NullValueHandling.Ignore)]
        public long? DaysOfPremium { get; set; }

        [JsonProperty("is_new", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsNew { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("icon_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? IconHeight { get; set; }

        [JsonProperty("resized_icons", NullValueHandling = NullValueHandling.Ignore)]
        public List<ResizedIcon> ResizedIcons { get; set; }

        [JsonProperty("days_of_drip_extension", NullValueHandling = NullValueHandling.Ignore)]
        public long? DaysOfDripExtension { get; set; }

        [JsonProperty("award_type", NullValueHandling = NullValueHandling.Ignore)]
        public string AwardType { get; set; }

        [JsonProperty("start_date")]
        public long? StartDate { get; set; }

        [JsonProperty("coin_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? CoinPrice { get; set; }

        [JsonProperty("icon_width", NullValueHandling = NullValueHandling.Ignore)]
        public long? IconWidth { get; set; }

        [JsonProperty("subreddit_coin_reward", NullValueHandling = NullValueHandling.Ignore)]
        public long? SubredditCoinReward { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class ResizedIcon
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }
    }

    public partial class AuthorFlairRichtext
    {
        [JsonProperty("e", NullValueHandling = NullValueHandling.Ignore)]
        public string E { get; set; }

        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public string T { get; set; }

        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public string A { get; set; }

        [JsonProperty("u", NullValueHandling = NullValueHandling.Ignore)]
        public Uri U { get; set; }
    }

    public partial class CrosspostParentList
    {
        [JsonProperty("approved_at_utc")]
        public object ApprovedAtUtc { get; set; }

        [JsonProperty("subreddit", NullValueHandling = NullValueHandling.Ignore)]
        public string Subreddit { get; set; }

        [JsonProperty("selftext", NullValueHandling = NullValueHandling.Ignore)]
        public string Selftext { get; set; }

        [JsonProperty("author_fullname", NullValueHandling = NullValueHandling.Ignore)]
        public string AuthorFullname { get; set; }

        [JsonProperty("saved", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Saved { get; set; }

        [JsonProperty("mod_reason_title")]
        public object ModReasonTitle { get; set; }

        [JsonProperty("gilded", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gilded { get; set; }

        [JsonProperty("clicked", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Clicked { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("link_flair_richtext", NullValueHandling = NullValueHandling.Ignore)]
        public List<LinkFlairRichtext> LinkFlairRichtext { get; set; }

        [JsonProperty("subreddit_name_prefixed", NullValueHandling = NullValueHandling.Ignore)]
        public string SubredditNamePrefixed { get; set; }

        [JsonProperty("hidden", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Hidden { get; set; }

        [JsonProperty("pwls", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pwls { get; set; }

        [JsonProperty("link_flair_css_class")]
        public string LinkFlairCssClass { get; set; }

        [JsonProperty("downs", NullValueHandling = NullValueHandling.Ignore)]
        public long? Downs { get; set; }

        [JsonProperty("thumbnail_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? ThumbnailHeight { get; set; }

        [JsonProperty("hide_score", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideScore { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("quarantine", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Quarantine { get; set; }

        [JsonProperty("link_flair_text_color", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkFlairTextColor { get; set; }

        [JsonProperty("author_flair_background_color")]
        public object AuthorFlairBackgroundColor { get; set; }

        [JsonProperty("subreddit_type", NullValueHandling = NullValueHandling.Ignore)]
        public string SubredditType { get; set; }

        [JsonProperty("ups", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ups { get; set; }

        [JsonProperty("total_awards_received", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalAwardsReceived { get; set; }

        [JsonProperty("media_embed", NullValueHandling = NullValueHandling.Ignore)]
        public CrosspostParentListMediaEmbed MediaEmbed { get; set; }

        [JsonProperty("thumbnail_width", NullValueHandling = NullValueHandling.Ignore)]
        public long? ThumbnailWidth { get; set; }

        [JsonProperty("author_flair_template_id")]
        public object AuthorFlairTemplateId { get; set; }

        [JsonProperty("is_original_content", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOriginalContent { get; set; }

        [JsonProperty("user_reports", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> UserReports { get; set; }

        [JsonProperty("secure_media")]
        public object SecureMedia { get; set; }

        [JsonProperty("is_reddit_media_domain", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRedditMediaDomain { get; set; }

        [JsonProperty("is_meta", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMeta { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("secure_media_embed", NullValueHandling = NullValueHandling.Ignore)]
        public CrosspostParentListMediaEmbed SecureMediaEmbed { get; set; }

        [JsonProperty("link_flair_text")]
        public string LinkFlairText { get; set; }

        [JsonProperty("can_mod_post", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanModPost { get; set; }

        [JsonProperty("score", NullValueHandling = NullValueHandling.Ignore)]
        public long? Score { get; set; }

        [JsonProperty("approved_by")]
        public object ApprovedBy { get; set; }

        [JsonProperty("author_premium", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AuthorPremium { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Thumbnail { get; set; }

        [JsonProperty("edited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Edited { get; set; }

        [JsonProperty("author_flair_css_class")]
        public object AuthorFlairCssClass { get; set; }

        [JsonProperty("steward_reports", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> StewardReports { get; set; }

        [JsonProperty("author_flair_richtext", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> AuthorFlairRichtext { get; set; }

        [JsonProperty("gildings", NullValueHandling = NullValueHandling.Ignore)]
        public CrosspostParentListGildings Gildings { get; set; }

        [JsonProperty("post_hint", NullValueHandling = NullValueHandling.Ignore)]
        public string PostHint { get; set; }

        [JsonProperty("content_categories")]
        public object ContentCategories { get; set; }

        [JsonProperty("is_self", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        [JsonProperty("mod_note")]
        public object ModNote { get; set; }

        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public long? Created { get; set; }

        [JsonProperty("link_flair_type", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkFlairType { get; set; }

        [JsonProperty("wls", NullValueHandling = NullValueHandling.Ignore)]
        public long? Wls { get; set; }

        [JsonProperty("removed_by_category")]
        public object RemovedByCategory { get; set; }

        [JsonProperty("banned_by")]
        public object BannedBy { get; set; }

        [JsonProperty("author_flair_type", NullValueHandling = NullValueHandling.Ignore)]
        public string AuthorFlairType { get; set; }

        [JsonProperty("domain", NullValueHandling = NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [JsonProperty("allow_live_comments", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowLiveComments { get; set; }

        [JsonProperty("selftext_html")]
        public object SelftextHtml { get; set; }

        [JsonProperty("likes")]
        public object Likes { get; set; }

        [JsonProperty("suggested_sort")]
        public object SuggestedSort { get; set; }

        [JsonProperty("banned_at_utc")]
        public object BannedAtUtc { get; set; }

        [JsonProperty("view_count")]
        public object ViewCount { get; set; }

        [JsonProperty("archived", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Archived { get; set; }

        [JsonProperty("no_follow", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NoFollow { get; set; }

        [JsonProperty("is_crosspostable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsCrosspostable { get; set; }

        [JsonProperty("pinned", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Pinned { get; set; }

        [JsonProperty("over_18", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Over18 { get; set; }

        [JsonProperty("preview", NullValueHandling = NullValueHandling.Ignore)]
        public Preview Preview { get; set; }

        [JsonProperty("all_awardings", NullValueHandling = NullValueHandling.Ignore)]
        public List<AllAwarding> AllAwardings { get; set; }

        [JsonProperty("awarders", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Awarders { get; set; }

        [JsonProperty("media_only", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MediaOnly { get; set; }

        [JsonProperty("link_flair_template_id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? LinkFlairTemplateId { get; set; }

        [JsonProperty("can_gild", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanGild { get; set; }

        [JsonProperty("spoiler", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Spoiler { get; set; }

        [JsonProperty("locked", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Locked { get; set; }

        [JsonProperty("author_flair_text")]
        public object AuthorFlairText { get; set; }

        [JsonProperty("visited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

        [JsonProperty("removed_by")]
        public object RemovedBy { get; set; }

        [JsonProperty("num_reports")]
        public object NumReports { get; set; }

        [JsonProperty("distinguished")]
        public object Distinguished { get; set; }

        [JsonProperty("subreddit_id", NullValueHandling = NullValueHandling.Ignore)]
        public string SubredditId { get; set; }

        [JsonProperty("mod_reason_by")]
        public object ModReasonBy { get; set; }

        [JsonProperty("removal_reason")]
        public object RemovalReason { get; set; }

        [JsonProperty("link_flair_background_color", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkFlairBackgroundColor { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("is_robot_indexable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRobotIndexable { get; set; }

        [JsonProperty("report_reasons")]
        public object ReportReasons { get; set; }

        [JsonProperty("author", NullValueHandling = NullValueHandling.Ignore)]
        public string Author { get; set; }

        [JsonProperty("discussion_type")]
        public object DiscussionType { get; set; }

        [JsonProperty("num_comments", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumComments { get; set; }

        [JsonProperty("send_replies", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SendReplies { get; set; }

        [JsonProperty("whitelist_status", NullValueHandling = NullValueHandling.Ignore)]
        public string WhitelistStatus { get; set; }

        [JsonProperty("contest_mode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ContestMode { get; set; }

        [JsonProperty("mod_reports", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ModReports { get; set; }

        [JsonProperty("author_patreon_flair", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AuthorPatreonFlair { get; set; }

        [JsonProperty("author_flair_text_color")]
        public object AuthorFlairTextColor { get; set; }

        [JsonProperty("permalink", NullValueHandling = NullValueHandling.Ignore)]
        public string Permalink { get; set; }

        [JsonProperty("parent_whitelist_status", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentWhitelistStatus { get; set; }

        [JsonProperty("stickied", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Stickied { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("subreddit_subscribers", NullValueHandling = NullValueHandling.Ignore)]
        public long? SubredditSubscribers { get; set; }

        [JsonProperty("created_utc", NullValueHandling = NullValueHandling.Ignore)]
        public long? CreatedUtc { get; set; }

        [JsonProperty("num_crossposts", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumCrossposts { get; set; }

        [JsonProperty("media")]
        public object Media { get; set; }

        [JsonProperty("is_video", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVideo { get; set; }
    }

    public partial class CrosspostParentListGildings
    {
        [JsonProperty("gid_1", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid1 { get; set; }
    }

    public partial class LinkFlairRichtext
    {
        [JsonProperty("e", NullValueHandling = NullValueHandling.Ignore)]
        public string E { get; set; }

        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public string T { get; set; }
    }

    public partial class CrosspostParentListMediaEmbed
    {
    }

    public partial class Preview
    {
        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [JsonProperty("reddit_video_preview", NullValueHandling = NullValueHandling.Ignore)]
        public RedditVideo RedditVideoPreview { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public ResizedIcon Source { get; set; }

        [JsonProperty("resolutions", NullValueHandling = NullValueHandling.Ignore)]
        public List<ResizedIcon> Resolutions { get; set; }

        [JsonProperty("variants", NullValueHandling = NullValueHandling.Ignore)]
        public Variants Variants { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }
    }

    public partial class Variants
    {
        [JsonProperty("gif", NullValueHandling = NullValueHandling.Ignore)]
        public Gif Gif { get; set; }

        [JsonProperty("mp4", NullValueHandling = NullValueHandling.Ignore)]
        public Gif Mp4 { get; set; }
    }

    public partial class Gif
    {
        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public ResizedIcon Source { get; set; }

        [JsonProperty("resolutions", NullValueHandling = NullValueHandling.Ignore)]
        public List<ResizedIcon> Resolutions { get; set; }
    }

    public partial class RedditVideo
    {
        [JsonProperty("fallback_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri FallbackUrl { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("scrubber_media_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ScrubberMediaUrl { get; set; }

        [JsonProperty("dash_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri DashUrl { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? Duration { get; set; }

        [JsonProperty("hls_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HlsUrl { get; set; }

        [JsonProperty("is_gif", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsGif { get; set; }

        [JsonProperty("transcoding_status", NullValueHandling = NullValueHandling.Ignore)]
        public string TranscodingStatus { get; set; }
    }

    public partial class DataGildings
    {
        [JsonProperty("gid_1", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid1 { get; set; }

        [JsonProperty("gid_2", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid2 { get; set; }

        [JsonProperty("gid_3", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gid3 { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("oembed", NullValueHandling = NullValueHandling.Ignore)]
        public Oembed Oembed { get; set; }

        [JsonProperty("reddit_video", NullValueHandling = NullValueHandling.Ignore)]
        public RedditVideo RedditVideo { get; set; }
    }

    public partial class Oembed
    {
        [JsonProperty("provider_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ProviderUrl { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("author_name", NullValueHandling = NullValueHandling.Ignore)]
        public string AuthorName { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("html", NullValueHandling = NullValueHandling.Ignore)]
        public string Html { get; set; }

        [JsonProperty("thumbnail_width", NullValueHandling = NullValueHandling.Ignore)]
        public long? ThumbnailWidth { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }

        [JsonProperty("provider_name", NullValueHandling = NullValueHandling.Ignore)]
        public string ProviderName { get; set; }

        [JsonProperty("thumbnail_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ThumbnailUrl { get; set; }

        [JsonProperty("thumbnail_height", NullValueHandling = NullValueHandling.Ignore)]
        public long? ThumbnailHeight { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class DataMediaEmbed
    {
        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public string Content { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("scrolling", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Scrolling { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("media_domain_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri MediaDomainUrl { get; set; }
    }

    public partial class RedditPostsApi
    {
        public static RedditPostsApi FromJson(string json) => JsonConvert.DeserializeObject<RedditPostsApi>(json, RedditUWP.API.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RedditPostsApi self) => JsonConvert.SerializeObject(self, RedditUWP.API.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
